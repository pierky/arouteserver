``simulate``, reproduce BGP announcements, help during migration
----------------------------------------------------------------

Goal
++++

To help in evaluating effects of a migration toward an *ARouteServer*-managed route server.

That is, to allow the route server operator to have a clearer view of what would happen by switching filtering mechanisms on.

How it works
++++++++++++

It...

- reads

  - a BGP4MP MRT file, or

  - the output from BIRD 'show route all' command or

  - the output from OpenBGPD 'show rib' command

- extracts BGP announcements from them

- builds a list of peers on the basis of the NEXT_HOP attribute of each route

- generates ExaBGP configurations to simulate those peers in order to have them announcing those routes toward the target route server

- builds a ``startup.sh`` file containing

  - a list of ``ip addr add ...`` commands to configure the IP addresses of the virtual peers on the NIC

  - the commands needed to run the ExaBGP instances and to bind them to the correct peer's source IP address.

Optionally, it puts it all together in a Docker environment where an instance representing the *ARouteServer*-managed route server is connected to another instance where all the ExaBGP virtual-clients run.

Input: either...

- a BGP4MP MRT file containing BGP announcements sent by clients to the current router server

  (this can be generated on a host configured as a client of the current route server)

- a file in the internal format ``A|W,next_hop,peer_as,prefix,as_path`` (A = announcement, W = withdrawal), that can be generated by the ``read_from_daemon.py`` script starting from...

  - the output of BIRD 'show route all' command:

    .. code-block:: console

       # birdcl show route all
       BIRD 1.6.3 ready.
       bird> show route all
       1.0.1.0/24         via 192.0.2.11 on eth0 [the_rs 19:45:29 from 192.0.2.2] * (100) [AS1i]
               Type: BGP unicast univ
               BGP.origin: IGP
               BGP.as_path: 1
               BGP.next_hop: 192.0.2.11
               BGP.local_pref: 100
       ...

  - the output of OpenBGPD 'show rib' command:

    .. code-block:: console

       # bgpctl show rib
       flags: * = Valid, > = Selected, I = via IBGP, A = Announced, S = Stale
       origin: i = IGP, e = EGP, ? = Incomplete

       flags destination          gateway          lpref   med aspath origin
       *>    0.0.0.0/0            192.0.2.31           1     0 3 i
       *>    1.0.1.0/24           192.0.2.11         100     0 1 i
       *     1.0.1.0/24           192.0.2.12         100     0 1 i
       *>    1.0.2.0/24           192.0.2.11         100     0 1 i
       *     1.0.2.0/24           192.0.2.12         100     0 1 i
       ...

Output:

- ExaBGP configuration files, one for each client, containing the configuration needed to setup a BGP session toward the *ARouteServer*-managed route server that you want to test.

  .. code-block:: console

     # cat var/exabgp/64513-10.0.0.18
     neighbor 10.0.0.2 {
       peer-as 64512;
       router-id 10.0.0.18;
       local-address 10.0.0.18;
       local-as 64513;
       process inject-routes {
         run /bin/bash /root/var/peers/64513/10.0.0.18;
         encoder text;
       }
     }

- ExaBGP announcement files, one for each client, with the dump of its BGP announcements as found within the MRT file.

  .. code-block:: console

     # cat var/peers/64513/10.0.0.18
     echo "announce attribute origin EGP as-path [64513 64514 64515] next-hop 10.0.0.18 nlri 192.168.0.0/24"
     sleep 0.05
     echo "announce attribute origin EGP as-path [64513 64516 64517 64518] next-hop 10.0.0.18 nlri 172.16.0.0/22"
     sleep 0.05
     [...]

- A ``startup.sh`` file that can be used to add all the IP addresses of the virtual peers to the network interface and to run the ExaBGP instances that simulate them:

  .. code-block:: console

     # cat var/startup.sh
     echo "Configuring IP addresses..."

     ip -4 addr add 10.0.0.18 dev eth0
     ip -4 addr add 10.0.0.19 dev eth0
     [...]
     sleep 2

     echo "Starting ExaBGP processes..."

     nohup env exabgp.daemon.user=root exabgp.daemon.daemonize=true exabgp.log.destination=exabgp.log.64513-10.0.0.18 exabgp.tcp.bind=10.0.0.18 exabgp-3.4.19/sbin/exabgp var/exabgp/64513-10.0.0.18 &>/dev/null &
     nohup env exabgp.daemon.user=root exabgp.daemon.daemonize=true exabgp.log.destination=exabgp.log.64519-10.0.0.19 exabgp.tcp.bind=10.0.0.19 exabgp-3.4.19/sbin/exabgp var/exabgp/64519-10.0.0.19 &>/dev/null &
     [...]

     echo "ExaBGP processes started!"

Docker simulation:

.. code-block:: console

   # ./simulate parse build docker
   Processing MRT file /path/to/file.mrt...
   Building ExaBGP configuration files...
   Building startup file...
   Building ARouteServer clients.yml file...
   Building route server IPv4 configuration...
   [ARouteServer output...]
   Building route server IPv6 configuration...
   [ARouteServer output...]
   Configuring the 'arouteserver_simulate_network' Docker network... it already exists... it's already configured
   Starting the route server instance...
   Starting the 'clients' docker instance...
   Run:
   - 'docker exec -it ars_clients bash' to attach to the 'clients' instance
   - 'docker exec -it ars_rs bash' to attach to the route server instance
   - 'docker stop ars_clients ars_rs' to kill them
   # docker exec -it ars_rs birdcl show protocols
   BIRD 1.6.3 ready.
   name     proto    table    state  since       info
   device1  Device   master   up     17:19:59
   ASxxx99_1 BGP      master   up     17:20:05    Established
   ASxxx37_2 BGP      master   up     17:20:04    Established
   ASxxx79_2 BGP      master   up     17:20:04    Established
   ASxxx05_1 BGP      master   up     17:20:04    Established
   ASxxx032_1 BGP      master   up     17:20:04    Established
   ASxxx82_1 BGP      master   up     17:20:05    Established
   ASxxx29_1 BGP      master   up     17:20:04    Established
   ASxxx41_2 BGP      master   up     17:20:06    Established
   ASxxx97_2 BGP      master   up     17:20:04    Established
   ASxxx60_1 BGP      master   up     17:20:06    Established
   ASxxx05_2 BGP      master   up     17:20:04    Established
   ASxxx85_1 BGP      master   up     17:20:04    Established
   ASxxx2_1 BGP      master   up     17:20:04    Established
   ASxxx6_1 BGP      master   up     17:20:04    Established
   ASxxx63_1 BGP      master   up     17:20:04    Established
   ASxxx9_2 BGP      master   up     17:20:04    Established
   ASxxx4_1 BGP      master   up     17:20:06    Established

Requirements
++++++++++++

- `ARouteServer <https://arouteserver.readthedocs.io/>`_, to build the route server configuration files.

- (optional) `mrtparse <https://github.com/t2mune/mrtparse>`_, to parse the MRT file. Not needed if an input file in the internal format is used, for example built starting from BIRD/OpenBGPD show commands output.

  It can be installed using pip...

  .. code-block:: console

     # pip install mrtparse

  ... or cloned locally:

  .. code-block:: console

     # git clone https://github.com/t2mune/mrtparse.git ~/

  The path to the ``mrt2bgpdump.py`` example script must be configured in the ``mrt2bgpdump`` variable.
  When cloned locally, the destination directory path must be set in the ``mrtparse_dir`` variable.

- (optional) `Docker <https://www.docker.com/>`_, to run the virtual environment.

Installation
++++++++++++

Fetch this script locally...

.. code-block:: console

   # mkdir ~/ars_simulate
   # cd ~/ars_simulate
   # curl -OL https://raw.githubusercontent.com/pierky/arouteserver/master/tools/simulate/simulate

... or run it from within the arouteserver repository.

Copy the ``config.distrib`` into ``config`` and edit it.

Run the script:

.. code-block:: console

   # ./simulate [...]
