router id 192.0.2.11;

log "/var/log/bird.log" all;
log syslog all;
debug protocols all;

protocol device { }

protocol static own_prefixes {
	route {{ data.AS1_good1 }} reject;
	route {{ data.AS1_good2 }} reject;
}
protocol static bad_prefixes {
	route {{ data.bogon1 }} reject;
	route {{ data.local1 }} reject;
	route {{ data.pref_len1 }} reject; 
	route {{ data.peer_as1 }} reject;
	route {{ data.invalid_asn1 }} reject;
	route {{ data.aspath_len1 }} reject;
	route {{ data.AS1_whitel_1 }} reject;
	route {{ data.AS1_whitel_2 }} reject;
	route {{ data.AS1_whitel_3 }} reject;
	route {{ data.AS1_whitel_4 }} reject;
	route {{ data.AS1_whitel_5 }} reject;
	route {{ data.AS1_whitel_6 }} reject;
}

filter to_the_rs {
	if net = {{ data.peer_as1 }} then
		bgp_path.prepend(2);
	if net = {{ data.invalid_asn1 }} then {
		bgp_path.prepend(65536);
		bgp_path.prepend(1);
	}
	if net = {{ data.aspath_len1 }} then {
		bgp_path.prepend(2);
		bgp_path.prepend(2);
		bgp_path.prepend(2);
		bgp_path.prepend(2);
		bgp_path.prepend(2);
		bgp_path.prepend(2);
		bgp_path.prepend(1);
	}
	if net = {{ data.AS103_gshut_1 }} then {
		bgp_community.add((65535, 0));
	}
	if net = {{ data.AS1_whitel_1 }} then {
		bgp_path.delete(1);
		bgp_path.prepend(1011);
		bgp_path.prepend(1);
	}
	if net = {{ data.AS1_whitel_2 }} then {
		bgp_path.delete(1);
		bgp_path.prepend(1000);
		bgp_path.prepend(1);
	}
	if net = {{ data.AS1_whitel_3 }} then {
		bgp_path.delete(1);
		bgp_path.prepend(1011);
		bgp_path.prepend(1);
	}
	if net = {{ data.AS1_whitel_4 }} then {
		bgp_path.delete(1);
		bgp_path.prepend(1011);
		bgp_path.prepend(1);
	}
	if net = {{ data.AS1_whitel_5 }} then {
		bgp_path.delete(1);
		bgp_path.prepend(1000);
		bgp_path.prepend(1);
	}
	if net = {{ data.AS1_whitel_6 }} then {
		bgp_path.delete(1);
		bgp_path.prepend(1011);
		bgp_path.prepend(1);
	}
	accept;
}
filter from_rs {
	# AS1 must announce AS103_gshut_* to test gshut.
	if net = {{ data.AS103_gshut_1 }} then
		reject;
	if net = {{ data.AS103_gshut_2 }} then
		reject;
	accept;
}
protocol bgp the_rs {
	local as 1;
	neighbor {{ data.rs_IPAddress }} as 999;
	next hop self;
	import filter from_rs;
	export filter to_the_rs;
	connect delay time 1;
	connect retry time 1;
}
protocol bgp AS101 {
	local as 1;
	neighbor {{ data.AS101_IPAddress }} as 101;
	import all;
	export all;
	connect delay time 1;
	connect retry time 1;
}
