
router id 192.0.2.2;
define rs_as = 999;

log "/var/log/bird.log" all;
log syslog all;
debug protocols { states, routes, filters, interfaces, events };

timeformat base         iso long;
timeformat log          iso long;
timeformat protocol     iso long;
timeformat route        iso long;

protocol device {};

table master sorted;




# ---------------------------------------------------------
# RPKI

# RPKI not used.



# ---------------------------------------------------------
# IRRDB

# AS10745, used_by client AS10745_2
define AS_SET_AS10745_asns = [
	10745
];

define AS_SET_AS10745_prefixes_6 = [
	2001:500:4::/48
];





# ---------------------------------------------------------
# COMMON

# This function returns True if 'net' is a bogon prefix
# or falls within a bogon prefix.
function prefix_is_bogon()
prefix set bogons_6;
{
	bogons_6 = [
		# Default route
		::/0,

		# loopback, unspecified, v4-mapped
		::/8{8,128},

		# RFC 6052 - IPv4-IPv6 Translation
		64:ff9b::/96{96,128},

		# RFC 6666 - reserved for Discard-Only Address Block
		100::/8{8,128},

		# RFC 4048 - Reserved by IETF
		200::/7{7,128},

		# RFC 4291 - Reserved by IETF
		400::/6{6,128},

		# RFC 4291 - Reserved by IETF
		800::/5{5,128},

		# RFC 4291 - Reserved by IETF
		1000::/4{4,128},

		# RFC 4380 - Teredo prefix
		2001::/33{33,128},

		# RFC 4380 - Teredo prefix
		2001:0:8000::/33{33,128},

		# RFC 5180 - Benchmarking
		2001:2::/48{48,128},

		# RFC 7450 - Automatic Multicast Tunneling
		2001:3::/32{32,128},

		# RFC 4843 - Deprecated ORCHID
		2001:10::/28{28,128},

		# RFC 7343 - ORCHIDv2
		2001:20::/28{28,128},

		# RFC 3849 - NON-ROUTABLE range to be used for documentation purpose
		2001:db8::/32{32,128},

		# RFC 3068 - 6to4 prefix
		2002::/16{16,128},

		# RFC 5156 - used for the 6bone but was returned
		3ffe::/16{16,128},

		# RFC 4291 - Reserved by IETF
		4000::/3{3,128},

		# RFC 5156 - used for the 6bone but was returned
		5f00::/8{8,128},

		# RFC 4291 - Reserved by IETF
		6000::/3{3,128},

		# RFC 4291 - Reserved by IETF
		8000::/3{3,128},

		# RFC 4291 - Reserved by IETF
		a000::/3{3,128},

		# RFC 4291 - Reserved by IETF
		c000::/3{3,128},

		# RFC 4291 - Reserved by IETF
		e000::/4{4,128},

		# RFC 4291 - Reserved by IETF
		f000::/5{5,128},

		# RFC 4291 - Reserved by IETF
		f800::/6{6,128},

		# RFC 4193 - Unique Local Unicast
		fc00::/7{7,128},

		# RFC 4291 - Link Local Unicast
		fe80::/10{10,128},

		# RFC 4291 - Reserved by IETF
		fec0::/10{10,128},

		# RFC 4291 - Multicast
		ff00::/8{8,128}
	];

	if net ~ bogons_6 then return true;
	return false;
}

# This function returns True if 'net' falls within a
# prefix contained in the global blacklist (for example,
# local networks)
function prefix_is_in_global_blacklist()
{
	# No IPv6 prefixes configured under the cfg.filtering.global_black_list_pref section.
	return false;
}

# This function returns True if the length of 'net' prefix
# falls within the range 'min'-'max' (included).
function prefix_len_is_valid (int pref_len_min; int pref_len_max) {
	if net.len < pref_len_min then return false;
	if net.len > pref_len_max then return false;
	return true;
}

# This function returns True if the AS_PATH contains one or
# more private/reserved ASN.
function as_path_contains_invalid_asn()
int set invalid_asns;
{
	# http://www.iana.org/assignments/as-numbers/as-numbers.xhtml
	invalid_asns = [
		# 16-bit
		0,			# Reserved. RFC7607
		23456,			# AS_TRANS. RFC6793
		64496..64511,		# Reserved for use in documentation and sample code. RFC5398
		64512..65534,		# Reserved for Private Use. RFC6996
		65535,			# Reserved. RFC7300

		# 32-bit
		65536..65551,		# Reserved for use in documentation and sample code. RFC5398
		65552..131071,		# Reserved.
		4200000000..4294967294, # Reserved for Private Use. [RFC6996]
		4294967295		# Reserved. RFC7300
	];
	return bgp_path ~ invalid_asns;
}


# This function scrubs BGP communities used by the route server
# for signaling purpose toward its clients. (RFC7454, Section 11)
# It must be applied on routes entering the route server.
function scrub_communities_in() {
}

# This function scrubs BGP communities used by clients to instruct
# the route server to perform some actions.
# It must be applied on routes leaving the route server.
function scrub_communities_out() {
}

# This function verifies if the route is tagged with one of
# the blackhole filtering communities.
function is_blackhole_filtering_request() {
	return false;
}

# This function must be applied to outgoing routes.
# It applies the blackhole filtering policy to the current route.
function apply_blackhole_filtering_policy() {

	reject "blackhole filtering requested but no IPv6 policy given - REJECTING ", net;

}

# This function verifies if the current route can be announced to
# the given client on the basis of the attached control BGP
# communities.
function route_can_be_announced_to(int peer_as; ip client_ip; string client_id)
int client_rtt;
{
	return true;
}

# This function prepends the left-most ASN <times> times.
function do_prepend(int times) {
	case times {
		1: bgp_path.prepend(bgp_path.first);
		2: bgp_path.prepend(bgp_path.first); bgp_path.prepend(bgp_path.first);
		3: bgp_path.prepend(bgp_path.first); bgp_path.prepend(bgp_path.first); bgp_path.prepend(bgp_path.first);
	}
}

# This function verifies if the current route matches one of the
# control communities in charge of prepending client's ASN.
function apply_prepend(int peer_as; ip client_ip)
int client_rtt;
{



	return true;
}


# This function adds NO_EXPORT and/or NO_ADVERTISE
# well-known communities.
function add_noexport_noadvertise(int peer_as) {
}










# ---------------------------------------------------------
# MEMBERS


# AS-SET for AS10745_2
function origin_as_is_in_AS10745_2_as_set() {
	if bgp_path.last ~ AS_SET_AS10745_asns then
		return true;
	return false;
}

# R-SET for AS10745_2
function prefix_is_in_AS10745_2_as_set() {
    if net ~ AS_SET_AS10745_prefixes_6 then
        return true;
    return false;
}

function next_hop_is_valid_for_AS10745_2()
{
	# Checks if NEXT_HOP is one of those allowed for routes announced by AS10745_2
	if bgp_next_hop = 2001:db:1:1::22 then return true;
	return false;
}


function verify_AS10745_2_irrdb()
bool origin_ok;
bool prefix_ok;
bool validated;
{
	origin_ok = false;
	prefix_ok = false;
	validated = false;

	origin_ok = origin_as_is_in_AS10745_2_as_set();
	prefix_ok = prefix_is_in_AS10745_2_as_set();






	if !validated && !origin_ok then {
		reject "origin ASN [", bgp_path.last, "] not in allowed as-sets - REJECTING ", net;

	}
	if !validated && !prefix_ok then {
		reject "prefix not in client's r_set - REJECTING ", net;

	}
}

filter receive_from_AS10745_2 {
	if !(source = RTS_BGP ) then
		reject "source != RTS_BGP - REJECTING ", net;




	scrub_communities_in();


	# NEXT_HOP
	if !next_hop_is_valid_for_AS10745_2() then
		reject "NEXT_HOP [", bgp_next_hop, "] not allowed - REJECTING ", net;


	# AS_PATH: length
	if bgp_path.len > 32 then
		reject "AS_PATH len [", bgp_path.len ,"] longer than 32 - REJECTING ", net;


	# AS_PATH: left-most ASN
	if bgp_path.first != 10745 then
		reject "invalid left-most ASN [", bgp_path.first, "] - REJECTING ", net;


	# AS_PATH: invalid ASNs
	if as_path_contains_invalid_asn() then
		reject "AS_PATH [", bgp_path ,"] contains invalid ASN - REJECTING ", net;




	# Prefix: only IPv6 Global Unicast space allowed
	if !(net ~ [2000::/3+]) then
		reject "prefix is not in IPv6 Global Unicast space - REJECTING ", net;


	# Prefix: global blacklist
	if prefix_is_in_global_blacklist() then
		reject "prefix is in global blacklist - REJECTING ", net;



	# Prefix: bogon
	if prefix_is_bogon() then
		reject "prefix is bogon - REJECTING ", net;


	# IRRdb checks
	verify_AS10745_2_irrdb();

	# Blackhole request?
	if is_blackhole_filtering_request() then {
		accept "blackhole filtering request from AS10745_2 - ACCEPTING ", net;
	} else {

		# Prefix: length
		if !prefix_len_is_valid(12, 48) then
			reject "prefix len [", net.len, "] not in 12-48 - REJECTING ", net;


	}


	accept;
}

filter announce_to_AS10745_2 {


	# Blackhole request?
	if is_blackhole_filtering_request() then {
		apply_blackhole_filtering_policy();
	}

	# BGP control communities
	if !route_can_be_announced_to(10745, 2001:db:1:1::22, "AS10745_2") then
		reject "route didn't pass control communities checks - NOT ANNOUNCING ", net, " TO AS10745_2";

	apply_prepend(10745, 2001:db:1:1::22);


	add_noexport_noadvertise(10745);

	scrub_communities_out();



	accept;
}

protocol bgp AS10745_2 {

	local as 999;
	neighbor 2001:db:1:1::22 as 10745;
	rs client;

	passive on;
	ttl security off;
	interpret communities off;



	secondary;



	import keep filtered on;

	import filter receive_from_AS10745_2;
	export filter announce_to_AS10745_2;


		}



