
router id 192.0.2.2;
define rs_as = 999;

log "/var/log/bird.log" all;
log syslog all;
debug protocols { states, routes, filters, interfaces, events };

timeformat base         iso long;
timeformat log          iso long;
timeformat protocol     iso long;
timeformat route        iso long;

protocol device {};

ipv4 table master4 sorted;
ipv6 table master6 sorted;




# ---------------------------------------------------------
# RPKI

roa4 table RPKI4;
roa6 table RPKI6;
protocol static {
    roa4 { table RPKI4; };
}
protocol static {
    roa6 { table RPKI6; };
}



# ---------------------------------------------------------
# IRRDB

# WHITE_LIST_AS4_1, used_by client AS4_1 white list
define AS_SET_WHITE_LIST_AS4_1_asns = [
	41
];

define AS_SET_WHITE_LIST_AS4_1_prefixes_4 = [
	4.2.0.0/16{16,32}
];
define AS_SET_WHITE_LIST_AS4_1_prefixes_6 = [
	2a04:2::/32{32,128}
];

# AS4, used_by client AS4_1, client AS4_2
# no origin ASNs found for AS4

# no IPv4 prefixes found for AS4
# no IPv6 prefixes found for AS4

# WHITE_LIST_AS2_2, used_by client AS2_2 white list
define AS_SET_WHITE_LIST_AS2_2_asns = [
	21
];

define AS_SET_WHITE_LIST_AS2_2_prefixes_4 = [
	2.2.0.0/16{16,32}
];
define AS_SET_WHITE_LIST_AS2_2_prefixes_6 = [
	2a02:2::/32{32,128}
];

# AS-AS5_FROM_PDB, used_by client AS5_1, client AS5_2
# no origin ASNs found for AS_AS5_FROM_PDB

# no IPv4 prefixes found for AS_AS5_FROM_PDB
# no IPv6 prefixes found for AS_AS5_FROM_PDB

# AS-AS4, used_by client AS4_1, client AS4_2
# no origin ASNs found for AS_AS4

# no IPv4 prefixes found for AS_AS4
# no IPv6 prefixes found for AS_AS4

# AS2, used_by client AS2_1, client AS2_2
# no origin ASNs found for AS2

# no IPv4 prefixes found for AS2
# no IPv6 prefixes found for AS2

# WHITE_LIST_AS5_2, used_by client AS5_2 white list
define AS_SET_WHITE_LIST_AS5_2_asns = [
	51
];

define AS_SET_WHITE_LIST_AS5_2_prefixes_4 = [
	5.2.0.0/16{16,32}
];
define AS_SET_WHITE_LIST_AS5_2_prefixes_6 = [
	2a05:2::/32{32,128}
];

# AS5, used_by client AS5_1, client AS5_2
# no origin ASNs found for AS5

# no IPv4 prefixes found for AS5
# no IPv6 prefixes found for AS5

# AS6, used_by client AS6_1, client AS6_2
# no origin ASNs found for AS6

# no IPv4 prefixes found for AS6
# no IPv6 prefixes found for AS6

# WHITE_LIST_AS5_1, used_by client AS5_1 white list
define AS_SET_WHITE_LIST_AS5_1_asns = [
	51
];

define AS_SET_WHITE_LIST_AS5_1_prefixes_4 = [
	5.2.0.0/16{16,32}
];
define AS_SET_WHITE_LIST_AS5_1_prefixes_6 = [
	2a05:2::/32{32,128}
];

# WHITE_LIST_AS2_1, used_by client AS2_1 white list
define AS_SET_WHITE_LIST_AS2_1_asns = [
	21
];

define AS_SET_WHITE_LIST_AS2_1_prefixes_4 = [
	2.2.0.0/16{16,32}
];
define AS_SET_WHITE_LIST_AS2_1_prefixes_6 = [
	2a02:2::/32{32,128}
];

# AS1, used_by client AS1_1, client AS1_2
# no origin ASNs found for AS1

# no IPv4 prefixes found for AS1
# no IPv6 prefixes found for AS1

# WHITE_LIST_AS4_2, used_by client AS4_2 white list
define AS_SET_WHITE_LIST_AS4_2_asns = [
	41
];

define AS_SET_WHITE_LIST_AS4_2_prefixes_4 = [
	4.2.0.0/16{16,32}
];
define AS_SET_WHITE_LIST_AS4_2_prefixes_6 = [
	2a04:2::/32{32,128}
];

# AS-AS2, used_by client AS2_1, client AS2_2
# no origin ASNs found for AS_AS2

# no IPv4 prefixes found for AS_AS2
# no IPv6 prefixes found for AS_AS2





# ---------------------------------------------------------
# COMMON

# This function returns True if 'net' is a bogon prefix
# or falls within a bogon prefix.
function prefix_is_bogon()
prefix set bogons_4;
prefix set bogons_6;
{
	bogons_4 = [
		# Default route
		0.0.0.0/0,

		# IANA - Local Identification
		0.0.0.0/8{8,32},

		# RFC 1918 - Private Use
		10.0.0.0/8{8,32},

		# IANA - Loopback
		127.0.0.0/8{8,32},

		# RFC 3927 - Link Local
		169.254.0.0/16{16,32},

		# RFC 1918 - Private Use
		172.16.0.0/12{12,32},

		# RFC 5737 - TEST-NET-1
		192.0.2.0/24{24,32},

		# RFC 3068 - 6to4 prefix
		192.88.99.0/24{24,32},

		# RFC 1918 - Private Use
		192.168.0.0/16{16,32},

		# RFC 2544 - Network Interconnect Device Benchmark Testing
		198.18.0.0/15{15,32},

		# RFC 5737 - TEST-NET-2
		198.51.100.0/24{24,32},

		# RFC 5737 - TEST-NET-3
		203.0.113.0/24{24,32},

		# RFC 5771 - Multcast (formerly Class D)
		224.0.0.0/3{3,32},

		# RFC 6598 - Shared Address Space
		100.64.0.0/10{10,32}
	];
	bogons_6 = [
		# Default route
		::/0,

		# loopback, unspecified, v4-mapped
		::/8{8,128},

		# RFC 6052 - IPv4-IPv6 Translation
		64:ff9b::/96{96,128},

		# RFC 6666 - reserved for Discard-Only Address Block
		100::/8{8,128},

		# RFC 4048 - Reserved by IETF
		200::/7{7,128},

		# RFC 4291 - Reserved by IETF
		400::/6{6,128},

		# RFC 4291 - Reserved by IETF
		800::/5{5,128},

		# RFC 4291 - Reserved by IETF
		1000::/4{4,128},

		# RFC 4380 - Teredo prefix
		2001::/33{33,128},

		# RFC 4380 - Teredo prefix
		2001:0:8000::/33{33,128},

		# RFC 5180 - Benchmarking
		2001:2::/48{48,128},

		# RFC 7450 - Automatic Multicast Tunneling
		2001:3::/32{32,128},

		# RFC 4843 - Deprecated ORCHID
		2001:10::/28{28,128},

		# RFC 7343 - ORCHIDv2
		2001:20::/28{28,128},

		# RFC 3849 - NON-ROUTABLE range to be used for documentation purpose
		2001:db8::/32{32,128},

		# RFC 3068 - 6to4 prefix
		2002::/16{16,128},

		# RFC 5156 - used for the 6bone but was returned
		3ffe::/16{16,128},

		# RFC 4291 - Reserved by IETF
		4000::/3{3,128},

		# RFC 5156 - used for the 6bone but was returned
		5f00::/8{8,128},

		# RFC 4291 - Reserved by IETF
		6000::/3{3,128},

		# RFC 4291 - Reserved by IETF
		8000::/3{3,128},

		# RFC 4291 - Reserved by IETF
		a000::/3{3,128},

		# RFC 4291 - Reserved by IETF
		c000::/3{3,128},

		# RFC 4291 - Reserved by IETF
		e000::/4{4,128},

		# RFC 4291 - Reserved by IETF
		f000::/5{5,128},

		# RFC 4291 - Reserved by IETF
		f800::/6{6,128},

		# RFC 4193 - Unique Local Unicast
		fc00::/7{7,128},

		# RFC 4291 - Link Local Unicast
		fe80::/10{10,128},

		# RFC 4291 - Reserved by IETF
		fec0::/10{10,128},

		# RFC 4291 - Multicast
		ff00::/8{8,128}
	];

	if net.type = NET_IP4 then
		if net ~ bogons_4 then return true;
	if net.type = NET_IP6 then
		if net ~ bogons_6 then return true;
	return false;
}

# This function returns True if 'net' falls within a
# prefix contained in the global blacklist (for example,
# local networks)
function prefix_is_in_global_blacklist()
{
	# No IPv4 prefixes configured under the cfg.filtering.global_black_list_pref section.
	# No IPv6 prefixes configured under the cfg.filtering.global_black_list_pref section.
	return false;
}

# This function returns True if the length of 'net' prefix
# falls within the range 'min'-'max' (included).
function prefix_len_is_valid (int pref_len_min; int pref_len_max) {
	if net.len < pref_len_min then return false;
	if net.len > pref_len_max then return false;
	return true;
}

# This function returns True if the AS_PATH contains one or
# more private/reserved ASN.
function as_path_contains_invalid_asn()
int set invalid_asns;
{
	# http://www.iana.org/assignments/as-numbers/as-numbers.xhtml
	invalid_asns = [
		# 16-bit
		0,			# Reserved. RFC7607
		23456,			# AS_TRANS. RFC6793
		64496..64511,		# Reserved for use in documentation and sample code. RFC5398
		64512..65534,		# Reserved for Private Use. RFC6996
		65535,			# Reserved. RFC7300

		# 32-bit
		65536..65551,		# Reserved for use in documentation and sample code. RFC5398
		65552..131071,		# Reserved.
		4200000000..4294967294, # Reserved for Private Use. [RFC6996]
		4294967295		# Reserved. RFC7300
	];
	return bgp_path ~ invalid_asns;
}


# This function scrubs BGP communities used by the route server
# for signaling purpose toward its clients. (RFC7454, Section 11)
# It must be applied on routes entering the route server.
function scrub_communities_in() {
	# origin_not_present_in_as_set
        bgp_community.delete([(999, 64515)]);
        bgp_large_community.delete([(999, 0, 64515)]);

	# origin_present_in_as_set
        bgp_community.delete([(999, 64514)]);
        bgp_large_community.delete([(999, 0, 64514)]);

	# prefix_not_present_in_as_set
        bgp_community.delete([(999, 64513)]);
        bgp_large_community.delete([(999, 0, 64513)]);

	# prefix_present_in_as_set
        bgp_community.delete([(999, 64512)]);
        bgp_large_community.delete([(999, 0, 64512)]);

	# prefix_validated_via_arin_whois_db_dump
        bgp_community.delete([(999, 64518)]);
        bgp_large_community.delete([(999, 0, 64518)]);

	# prefix_validated_via_rpki_roas
        bgp_community.delete([(999, 64516)]);
        bgp_large_community.delete([(999, 0, 64516)]);

	# route_validated_via_white_list
        bgp_community.delete([(999, 64517)]);
        bgp_large_community.delete([(999, 0, 64517)]);

}

# This function scrubs BGP communities used by clients to instruct
# the route server to perform some actions.
# It must be applied on routes leaving the route server.
function scrub_communities_out() {
}

# This function verifies if the route is tagged with one of
# the blackhole filtering communities.
function is_blackhole_filtering_request() {
	if net.type = NET_IP4 then {
	}
	if net.type = NET_IP6 then {
	}
	return false;
}

# This function must be applied to outgoing routes.
# It applies the blackhole filtering policy to the current route.
function apply_blackhole_filtering_policy() {
	if net.type = NET_IP4 then {

	reject "blackhole filtering requested but no IPv4 policy given - REJECTING ", net;

	}
	if net.type = NET_IP6 then {

	reject "blackhole filtering requested but no IPv6 policy given - REJECTING ", net;

	}
}

# This function verifies if the current route can be announced to
# the given client on the basis of the attached control BGP
# communities.
function route_can_be_announced_to(int peer_as; ip client_ip; string client_id)
int client_rtt;
{
	return true;
}

# This function prepends the left-most ASN <times> times.
function do_prepend(int times) {
	case times {
		1: bgp_path.prepend(bgp_path.first);
		2: bgp_path.prepend(bgp_path.first); bgp_path.prepend(bgp_path.first);
		3: bgp_path.prepend(bgp_path.first); bgp_path.prepend(bgp_path.first); bgp_path.prepend(bgp_path.first);
	}
}

# This function verifies if the current route matches one of the
# control communities in charge of prepending client's ASN.
function apply_prepend(int peer_as; ip client_ip)
int client_rtt;
{



	return true;
}


# This function adds NO_EXPORT and/or NO_ADVERTISE
# well-known communities.
function add_noexport_noadvertise(int peer_as) {
}




# This function verifies if there is such a ROA for the
# current route's origin ASN to validate the announced prefix.
function prefix_in_rpki_roas_as_route_objects() {
	if net.type = NET_IP4 then {
		case roa_check(RPKI4) {
			ROA_VALID: return true;
		}
	} else {
		case roa_check(RPKI6) {
			ROA_VALID: return true;
		}
	}
	return false;
}






# ---------------------------------------------------------
# MEMBERS


# AS-SET for AS1_1
function origin_as_is_in_AS1_1_as_set() {
	# AS-SET AS1 referenced but empty.
	return false;
}

# R-SET for AS1_1
function prefix_is_in_AS1_1_as_set() {
	# AS-SET AS1 referenced but empty.
    return false;
}

function next_hop_is_valid_for_AS1_1()
{
	# Checks if NEXT_HOP is one of those allowed for routes announced by AS1_1
	if bgp_next_hop = 192.0.2.11 then return true;
	return false;
}


function verify_AS1_1_irrdb()
bool origin_ok;
bool prefix_ok;
bool validated;
{
	origin_ok = false;
	prefix_ok = false;
	validated = false;

	origin_ok = origin_as_is_in_AS1_1_as_set();
	prefix_ok = prefix_is_in_AS1_1_as_set();

	if !origin_ok then {
		bgp_community.add((999, 64515));
		bgp_large_community.add((999, 0, 64515));

	}
	if origin_ok then {
		bgp_community.add((999, 64514));
		bgp_large_community.add((999, 0, 64514));

	}
	if !prefix_ok then {
		bgp_community.add((999, 64513));
		bgp_large_community.add((999, 0, 64513));

	}
	if prefix_ok then {
		bgp_community.add((999, 64512));
		bgp_large_community.add((999, 0, 64512));

	}

	# Origin ASN is valid, prefix is not: check if a RPKI ROAs exists.
	if origin_ok && prefix_in_rpki_roas_as_route_objects() then {
		bgp_community.add((999, 64516));
		bgp_large_community.add((999, 0, 64516));

		validated = true;
	}




}

filter receive_from_AS1_1 {
	if !(source = RTS_BGP ) then
		reject "source != RTS_BGP - REJECTING ", net;


	if !(net.type = NET_IP4) then
		reject "AFI not enabled for this peer - REJECTING ", net;



	scrub_communities_in();


	# NEXT_HOP
	if !next_hop_is_valid_for_AS1_1() then
		reject "NEXT_HOP [", bgp_next_hop, "] not allowed - REJECTING ", net;


	# AS_PATH: length
	if bgp_path.len > 32 then
		reject "AS_PATH len [", bgp_path.len ,"] longer than 32 - REJECTING ", net;


	# AS_PATH: left-most ASN
	if bgp_path.first != 1 then
		reject "invalid left-most ASN [", bgp_path.first, "] - REJECTING ", net;


	# AS_PATH: invalid ASNs
	if as_path_contains_invalid_asn() then
		reject "AS_PATH [", bgp_path ,"] contains invalid ASN - REJECTING ", net;





	# Prefix: global blacklist
	if prefix_is_in_global_blacklist() then
		reject "prefix is in global blacklist - REJECTING ", net;



	# Prefix: bogon
	if prefix_is_bogon() then
		reject "prefix is bogon - REJECTING ", net;


	# IRRdb checks
	verify_AS1_1_irrdb();

	# Blackhole request?
	if is_blackhole_filtering_request() then {
		accept "blackhole filtering request from AS1_1 - ACCEPTING ", net;
	} else {

		# Prefix: length
		if !prefix_len_is_valid(8, 24) then
			reject "prefix len [", net.len, "] not in 8-24 - REJECTING ", net;


	}


	accept;
}

filter announce_to_AS1_1 {


	# Blackhole request?
	if is_blackhole_filtering_request() then {
		apply_blackhole_filtering_policy();
	}

	# BGP control communities
	if !route_can_be_announced_to(1, 192.0.2.11, "AS1_1") then
		reject "route didn't pass control communities checks - NOT ANNOUNCING ", net, " TO AS1_1";

	apply_prepend(1, 192.0.2.11);


	add_noexport_noadvertise(1);

	scrub_communities_out();



	accept;
}

protocol bgp AS1_1 {
	description "AS1_1 client, no AS-SET";

	local as 999;
	neighbor 192.0.2.11 as 1;
	rs client;

	passive on;
	ttl security off;
	interpret communities off;

	# ---------------------------------------
	ipv4 {
	table master4;


	secondary;


	import table on;

	import keep filtered on;

	import filter receive_from_AS1_1;
	export filter announce_to_AS1_1;

	# ---------------------------------------
	};

		}


# AS-SET for AS1_2
function origin_as_is_in_AS1_2_as_set() {
	# AS-SET AS1 referenced but empty.
	return false;
}

# R-SET for AS1_2
function prefix_is_in_AS1_2_as_set() {
	# AS-SET AS1 referenced but empty.
    return false;
}

function next_hop_is_valid_for_AS1_2()
{
	# Checks if NEXT_HOP is one of those allowed for routes announced by AS1_2
	if bgp_next_hop = 2001:db8:1:1::11 then return true;
	return false;
}


function verify_AS1_2_irrdb()
bool origin_ok;
bool prefix_ok;
bool validated;
{
	origin_ok = false;
	prefix_ok = false;
	validated = false;

	origin_ok = origin_as_is_in_AS1_2_as_set();
	prefix_ok = prefix_is_in_AS1_2_as_set();

	if !origin_ok then {
		bgp_community.add((999, 64515));
		bgp_large_community.add((999, 0, 64515));

	}
	if origin_ok then {
		bgp_community.add((999, 64514));
		bgp_large_community.add((999, 0, 64514));

	}
	if !prefix_ok then {
		bgp_community.add((999, 64513));
		bgp_large_community.add((999, 0, 64513));

	}
	if prefix_ok then {
		bgp_community.add((999, 64512));
		bgp_large_community.add((999, 0, 64512));

	}

	# Origin ASN is valid, prefix is not: check if a RPKI ROAs exists.
	if origin_ok && prefix_in_rpki_roas_as_route_objects() then {
		bgp_community.add((999, 64516));
		bgp_large_community.add((999, 0, 64516));

		validated = true;
	}




}

filter receive_from_AS1_2 {
	if !(source = RTS_BGP ) then
		reject "source != RTS_BGP - REJECTING ", net;


	if !(net.type = NET_IP6) then
		reject "AFI not enabled for this peer - REJECTING ", net;



	scrub_communities_in();


	# NEXT_HOP
	if !next_hop_is_valid_for_AS1_2() then
		reject "NEXT_HOP [", bgp_next_hop, "] not allowed - REJECTING ", net;


	# AS_PATH: length
	if bgp_path.len > 32 then
		reject "AS_PATH len [", bgp_path.len ,"] longer than 32 - REJECTING ", net;


	# AS_PATH: left-most ASN
	if bgp_path.first != 1 then
		reject "invalid left-most ASN [", bgp_path.first, "] - REJECTING ", net;


	# AS_PATH: invalid ASNs
	if as_path_contains_invalid_asn() then
		reject "AS_PATH [", bgp_path ,"] contains invalid ASN - REJECTING ", net;




	# Prefix: only IPv6 Global Unicast space allowed
	if !(net ~ [2000::/3+]) then
		reject "prefix is not in IPv6 Global Unicast space - REJECTING ", net;


	# Prefix: global blacklist
	if prefix_is_in_global_blacklist() then
		reject "prefix is in global blacklist - REJECTING ", net;



	# Prefix: bogon
	if prefix_is_bogon() then
		reject "prefix is bogon - REJECTING ", net;


	# IRRdb checks
	verify_AS1_2_irrdb();

	# Blackhole request?
	if is_blackhole_filtering_request() then {
		accept "blackhole filtering request from AS1_2 - ACCEPTING ", net;
	} else {

		# Prefix: length
		if !prefix_len_is_valid(12, 48) then
			reject "prefix len [", net.len, "] not in 12-48 - REJECTING ", net;


	}


	accept;
}

filter announce_to_AS1_2 {


	# Blackhole request?
	if is_blackhole_filtering_request() then {
		apply_blackhole_filtering_policy();
	}

	# BGP control communities
	if !route_can_be_announced_to(1, 2001:db8:1:1::11, "AS1_2") then
		reject "route didn't pass control communities checks - NOT ANNOUNCING ", net, " TO AS1_2";

	apply_prepend(1, 2001:db8:1:1::11);


	add_noexport_noadvertise(1);

	scrub_communities_out();



	accept;
}

protocol bgp AS1_2 {
	description "AS1_1 client, no AS-SET";

	local as 999;
	neighbor 2001:db8:1:1::11 as 1;
	rs client;

	passive on;
	ttl security off;
	interpret communities off;

	# ---------------------------------------
	ipv6 {
	table master6;


	secondary;


	import table on;

	import keep filtered on;

	import filter receive_from_AS1_2;
	export filter announce_to_AS1_2;

	# ---------------------------------------
	};

		}


# AS-SET for AS2_1
function origin_as_is_in_AS2_1_as_set() {
	# AS-SET AS2 referenced but empty.
	if bgp_path.last ~ AS_SET_WHITE_LIST_AS2_1_asns then
		return true;
	# AS-SET AS_AS2 referenced but empty.
	return false;
}

# R-SET for AS2_1
function prefix_is_in_AS2_1_as_set() {
	# AS-SET AS2 referenced but empty.
    if net.type = NET_IP4 then
        if net ~ AS_SET_WHITE_LIST_AS2_1_prefixes_4 then
            return true;
	# AS-SET AS_AS2 referenced but empty.
    return false;
}

function next_hop_is_valid_for_AS2_1()
{
	# Checks if NEXT_HOP is one of those allowed for routes announced by AS2_1
	if bgp_next_hop = 192.0.2.21 then return true;
	return false;
}


function verify_AS2_1_irrdb()
bool origin_ok;
bool prefix_ok;
bool validated;
{
	origin_ok = false;
	prefix_ok = false;
	validated = false;

	origin_ok = origin_as_is_in_AS2_1_as_set();
	prefix_ok = prefix_is_in_AS2_1_as_set();

	if !origin_ok then {
		bgp_community.add((999, 64515));
		bgp_large_community.add((999, 0, 64515));

	}
	if origin_ok then {
		bgp_community.add((999, 64514));
		bgp_large_community.add((999, 0, 64514));

	}
	if !prefix_ok then {
		bgp_community.add((999, 64513));
		bgp_large_community.add((999, 0, 64513));

	}
	if prefix_ok then {
		bgp_community.add((999, 64512));
		bgp_large_community.add((999, 0, 64512));

	}

	# Origin ASN is valid, prefix is not: check if a RPKI ROAs exists.
	if origin_ok && prefix_in_rpki_roas_as_route_objects() then {
		bgp_community.add((999, 64516));
		bgp_large_community.add((999, 0, 64516));

		validated = true;
	}




}

filter receive_from_AS2_1 {
	if !(source = RTS_BGP ) then
		reject "source != RTS_BGP - REJECTING ", net;


	if !(net.type = NET_IP4) then
		reject "AFI not enabled for this peer - REJECTING ", net;



	scrub_communities_in();


	# NEXT_HOP
	if !next_hop_is_valid_for_AS2_1() then
		reject "NEXT_HOP [", bgp_next_hop, "] not allowed - REJECTING ", net;


	# AS_PATH: length
	if bgp_path.len > 32 then
		reject "AS_PATH len [", bgp_path.len ,"] longer than 32 - REJECTING ", net;


	# AS_PATH: left-most ASN
	if bgp_path.first != 2 then
		reject "invalid left-most ASN [", bgp_path.first, "] - REJECTING ", net;


	# AS_PATH: invalid ASNs
	if as_path_contains_invalid_asn() then
		reject "AS_PATH [", bgp_path ,"] contains invalid ASN - REJECTING ", net;





	# Prefix: global blacklist
	if prefix_is_in_global_blacklist() then
		reject "prefix is in global blacklist - REJECTING ", net;



	# Prefix: bogon
	if prefix_is_bogon() then
		reject "prefix is bogon - REJECTING ", net;


	# IRRdb checks
	verify_AS2_1_irrdb();

	# Blackhole request?
	if is_blackhole_filtering_request() then {
		accept "blackhole filtering request from AS2_1 - ACCEPTING ", net;
	} else {

		# Prefix: length
		if !prefix_len_is_valid(8, 24) then
			reject "prefix len [", net.len, "] not in 8-24 - REJECTING ", net;


	}


	accept;
}

filter announce_to_AS2_1 {


	# Blackhole request?
	if is_blackhole_filtering_request() then {
		apply_blackhole_filtering_policy();
	}

	# BGP control communities
	if !route_can_be_announced_to(2, 192.0.2.21, "AS2_1") then
		reject "route didn't pass control communities checks - NOT ANNOUNCING ", net, " TO AS2_1";

	apply_prepend(2, 192.0.2.21);


	add_noexport_noadvertise(2);

	scrub_communities_out();



	accept;
}

protocol bgp AS2_1 {
	description "AS2_1 client, AS-SET from AS2 configuration";

	local as 999;
	neighbor 192.0.2.21 as 2;
	rs client;

	passive on;
	ttl security off;
	interpret communities off;

	# ---------------------------------------
	ipv4 {
	table master4;


	secondary;


	import table on;

	import keep filtered on;

	import filter receive_from_AS2_1;
	export filter announce_to_AS2_1;

	# ---------------------------------------
	};

		}


# AS-SET for AS2_2
function origin_as_is_in_AS2_2_as_set() {
	if bgp_path.last ~ AS_SET_WHITE_LIST_AS2_2_asns then
		return true;
	# AS-SET AS2 referenced but empty.
	# AS-SET AS_AS2 referenced but empty.
	return false;
}

# R-SET for AS2_2
function prefix_is_in_AS2_2_as_set() {
    if net.type = NET_IP6 then
        if net ~ AS_SET_WHITE_LIST_AS2_2_prefixes_6 then
            return true;
	# AS-SET AS2 referenced but empty.
	# AS-SET AS_AS2 referenced but empty.
    return false;
}

function next_hop_is_valid_for_AS2_2()
{
	# Checks if NEXT_HOP is one of those allowed for routes announced by AS2_2
	if bgp_next_hop = 2001:db8:1:1::21 then return true;
	return false;
}


function verify_AS2_2_irrdb()
bool origin_ok;
bool prefix_ok;
bool validated;
{
	origin_ok = false;
	prefix_ok = false;
	validated = false;

	origin_ok = origin_as_is_in_AS2_2_as_set();
	prefix_ok = prefix_is_in_AS2_2_as_set();

	if !origin_ok then {
		bgp_community.add((999, 64515));
		bgp_large_community.add((999, 0, 64515));

	}
	if origin_ok then {
		bgp_community.add((999, 64514));
		bgp_large_community.add((999, 0, 64514));

	}
	if !prefix_ok then {
		bgp_community.add((999, 64513));
		bgp_large_community.add((999, 0, 64513));

	}
	if prefix_ok then {
		bgp_community.add((999, 64512));
		bgp_large_community.add((999, 0, 64512));

	}

	# Origin ASN is valid, prefix is not: check if a RPKI ROAs exists.
	if origin_ok && prefix_in_rpki_roas_as_route_objects() then {
		bgp_community.add((999, 64516));
		bgp_large_community.add((999, 0, 64516));

		validated = true;
	}




}

filter receive_from_AS2_2 {
	if !(source = RTS_BGP ) then
		reject "source != RTS_BGP - REJECTING ", net;


	if !(net.type = NET_IP6) then
		reject "AFI not enabled for this peer - REJECTING ", net;



	scrub_communities_in();


	# NEXT_HOP
	if !next_hop_is_valid_for_AS2_2() then
		reject "NEXT_HOP [", bgp_next_hop, "] not allowed - REJECTING ", net;


	# AS_PATH: length
	if bgp_path.len > 32 then
		reject "AS_PATH len [", bgp_path.len ,"] longer than 32 - REJECTING ", net;


	# AS_PATH: left-most ASN
	if bgp_path.first != 2 then
		reject "invalid left-most ASN [", bgp_path.first, "] - REJECTING ", net;


	# AS_PATH: invalid ASNs
	if as_path_contains_invalid_asn() then
		reject "AS_PATH [", bgp_path ,"] contains invalid ASN - REJECTING ", net;




	# Prefix: only IPv6 Global Unicast space allowed
	if !(net ~ [2000::/3+]) then
		reject "prefix is not in IPv6 Global Unicast space - REJECTING ", net;


	# Prefix: global blacklist
	if prefix_is_in_global_blacklist() then
		reject "prefix is in global blacklist - REJECTING ", net;



	# Prefix: bogon
	if prefix_is_bogon() then
		reject "prefix is bogon - REJECTING ", net;


	# IRRdb checks
	verify_AS2_2_irrdb();

	# Blackhole request?
	if is_blackhole_filtering_request() then {
		accept "blackhole filtering request from AS2_2 - ACCEPTING ", net;
	} else {

		# Prefix: length
		if !prefix_len_is_valid(12, 48) then
			reject "prefix len [", net.len, "] not in 12-48 - REJECTING ", net;


	}


	accept;
}

filter announce_to_AS2_2 {


	# Blackhole request?
	if is_blackhole_filtering_request() then {
		apply_blackhole_filtering_policy();
	}

	# BGP control communities
	if !route_can_be_announced_to(2, 2001:db8:1:1::21, "AS2_2") then
		reject "route didn't pass control communities checks - NOT ANNOUNCING ", net, " TO AS2_2";

	apply_prepend(2, 2001:db8:1:1::21);


	add_noexport_noadvertise(2);

	scrub_communities_out();



	accept;
}

protocol bgp AS2_2 {
	description "AS2_1 client, AS-SET from AS2 configuration";

	local as 999;
	neighbor 2001:db8:1:1::21 as 2;
	rs client;

	passive on;
	ttl security off;
	interpret communities off;

	# ---------------------------------------
	ipv6 {
	table master6;


	secondary;


	import table on;

	import keep filtered on;

	import filter receive_from_AS2_2;
	export filter announce_to_AS2_2;

	# ---------------------------------------
	};

		}


# AS-SET for AS4_1
function origin_as_is_in_AS4_1_as_set() {
	if bgp_path.last ~ AS_SET_WHITE_LIST_AS4_1_asns then
		return true;
	# AS-SET AS4 referenced but empty.
	# AS-SET AS_AS4 referenced but empty.
	return false;
}

# R-SET for AS4_1
function prefix_is_in_AS4_1_as_set() {
    if net.type = NET_IP4 then
        if net ~ AS_SET_WHITE_LIST_AS4_1_prefixes_4 then
            return true;
	# AS-SET AS4 referenced but empty.
	# AS-SET AS_AS4 referenced but empty.
    return false;
}

function next_hop_is_valid_for_AS4_1()
{
	# Checks if NEXT_HOP is one of those allowed for routes announced by AS4_1
	if bgp_next_hop = 192.0.2.41 then return true;
	return false;
}


function verify_AS4_1_irrdb()
bool origin_ok;
bool prefix_ok;
bool validated;
{
	origin_ok = false;
	prefix_ok = false;
	validated = false;

	origin_ok = origin_as_is_in_AS4_1_as_set();
	prefix_ok = prefix_is_in_AS4_1_as_set();

	if !origin_ok then {
		bgp_community.add((999, 64515));
		bgp_large_community.add((999, 0, 64515));

	}
	if origin_ok then {
		bgp_community.add((999, 64514));
		bgp_large_community.add((999, 0, 64514));

	}
	if !prefix_ok then {
		bgp_community.add((999, 64513));
		bgp_large_community.add((999, 0, 64513));

	}
	if prefix_ok then {
		bgp_community.add((999, 64512));
		bgp_large_community.add((999, 0, 64512));

	}

	# Origin ASN is valid, prefix is not: check if a RPKI ROAs exists.
	if origin_ok && prefix_in_rpki_roas_as_route_objects() then {
		bgp_community.add((999, 64516));
		bgp_large_community.add((999, 0, 64516));

		validated = true;
	}



	# Client's white list
	if !validated && net ~ [ 4.4.0.0/16 ] then {
		if bgp_path.last = 44 then {
		bgp_community.add((999, 64517));
		bgp_large_community.add((999, 0, 64517));

			validated = true;
		}
	}
	if !validated && net ~ [ 4.5.0.0/16{16,32} ] then {
		if bgp_path.last = 43 then {
		bgp_community.add((999, 64517));
		bgp_large_community.add((999, 0, 64517));

			validated = true;
		}
	}
	if !validated && net ~ [ 4.6.0.0/16{16,32} ] then {
		bgp_community.add((999, 64517));
		bgp_large_community.add((999, 0, 64517));

		validated = true;
	}

	if !validated && !origin_ok then {
		reject "origin ASN [", bgp_path.last, "] not in allowed as-sets - REJECTING ", net;

	}
}

filter receive_from_AS4_1 {
	if !(source = RTS_BGP ) then
		reject "source != RTS_BGP - REJECTING ", net;


	if !(net.type = NET_IP4) then
		reject "AFI not enabled for this peer - REJECTING ", net;



	scrub_communities_in();


	# NEXT_HOP
	if !next_hop_is_valid_for_AS4_1() then
		reject "NEXT_HOP [", bgp_next_hop, "] not allowed - REJECTING ", net;


	# AS_PATH: length
	if bgp_path.len > 32 then
		reject "AS_PATH len [", bgp_path.len ,"] longer than 32 - REJECTING ", net;


	# AS_PATH: left-most ASN
	if bgp_path.first != 4 then
		reject "invalid left-most ASN [", bgp_path.first, "] - REJECTING ", net;


	# AS_PATH: invalid ASNs
	if as_path_contains_invalid_asn() then
		reject "AS_PATH [", bgp_path ,"] contains invalid ASN - REJECTING ", net;





	# Prefix: global blacklist
	if prefix_is_in_global_blacklist() then
		reject "prefix is in global blacklist - REJECTING ", net;



	# Prefix: bogon
	if prefix_is_bogon() then
		reject "prefix is bogon - REJECTING ", net;


	# IRRdb checks
	verify_AS4_1_irrdb();

	# Blackhole request?
	if is_blackhole_filtering_request() then {
		accept "blackhole filtering request from AS4_1 - ACCEPTING ", net;
	} else {

		# Prefix: length
		if !prefix_len_is_valid(8, 24) then
			reject "prefix len [", net.len, "] not in 8-24 - REJECTING ", net;


	}


	accept;
}

filter announce_to_AS4_1 {


	# Blackhole request?
	if is_blackhole_filtering_request() then {
		apply_blackhole_filtering_policy();
	}

	# BGP control communities
	if !route_can_be_announced_to(4, 192.0.2.41, "AS4_1") then
		reject "route didn't pass control communities checks - NOT ANNOUNCING ", net, " TO AS4_1";

	apply_prepend(4, 192.0.2.41);


	add_noexport_noadvertise(4);

	scrub_communities_out();



	accept;
}

protocol bgp AS4_1 {
	description "AS4_1 client, AS-SET configured at client level";

	local as 999;
	neighbor 192.0.2.41 as 4;
	rs client;

	passive on;
	ttl security off;
	interpret communities off;

	# ---------------------------------------
	ipv4 {
	table master4;


	secondary;


	import table on;

	import keep filtered on;

	import filter receive_from_AS4_1;
	export filter announce_to_AS4_1;

	# ---------------------------------------
	};

		}


# AS-SET for AS4_2
function origin_as_is_in_AS4_2_as_set() {
	# AS-SET AS4 referenced but empty.
	# AS-SET AS_AS4 referenced but empty.
	if bgp_path.last ~ AS_SET_WHITE_LIST_AS4_2_asns then
		return true;
	return false;
}

# R-SET for AS4_2
function prefix_is_in_AS4_2_as_set() {
	# AS-SET AS4 referenced but empty.
	# AS-SET AS_AS4 referenced but empty.
    if net.type = NET_IP6 then
        if net ~ AS_SET_WHITE_LIST_AS4_2_prefixes_6 then
            return true;
    return false;
}

function next_hop_is_valid_for_AS4_2()
{
	# Checks if NEXT_HOP is one of those allowed for routes announced by AS4_2
	if bgp_next_hop = 2001:db8:1:1::41 then return true;
	return false;
}


function verify_AS4_2_irrdb()
bool origin_ok;
bool prefix_ok;
bool validated;
{
	origin_ok = false;
	prefix_ok = false;
	validated = false;

	origin_ok = origin_as_is_in_AS4_2_as_set();
	prefix_ok = prefix_is_in_AS4_2_as_set();

	if !origin_ok then {
		bgp_community.add((999, 64515));
		bgp_large_community.add((999, 0, 64515));

	}
	if origin_ok then {
		bgp_community.add((999, 64514));
		bgp_large_community.add((999, 0, 64514));

	}
	if !prefix_ok then {
		bgp_community.add((999, 64513));
		bgp_large_community.add((999, 0, 64513));

	}
	if prefix_ok then {
		bgp_community.add((999, 64512));
		bgp_large_community.add((999, 0, 64512));

	}

	# Origin ASN is valid, prefix is not: check if a RPKI ROAs exists.
	if origin_ok && prefix_in_rpki_roas_as_route_objects() then {
		bgp_community.add((999, 64516));
		bgp_large_community.add((999, 0, 64516));

		validated = true;
	}



	# Client's white list
	if !validated && net ~ [ 2a04:4::/32 ] then {
		if bgp_path.last = 44 then {
		bgp_community.add((999, 64517));
		bgp_large_community.add((999, 0, 64517));

			validated = true;
		}
	}
	if !validated && net ~ [ 2a04:5::/32{32,128} ] then {
		if bgp_path.last = 43 then {
		bgp_community.add((999, 64517));
		bgp_large_community.add((999, 0, 64517));

			validated = true;
		}
	}
	if !validated && net ~ [ 2a04:6::/32{32,128} ] then {
		bgp_community.add((999, 64517));
		bgp_large_community.add((999, 0, 64517));

		validated = true;
	}

	if !validated && !origin_ok then {
		reject "origin ASN [", bgp_path.last, "] not in allowed as-sets - REJECTING ", net;

	}
}

filter receive_from_AS4_2 {
	if !(source = RTS_BGP ) then
		reject "source != RTS_BGP - REJECTING ", net;


	if !(net.type = NET_IP6) then
		reject "AFI not enabled for this peer - REJECTING ", net;



	scrub_communities_in();


	# NEXT_HOP
	if !next_hop_is_valid_for_AS4_2() then
		reject "NEXT_HOP [", bgp_next_hop, "] not allowed - REJECTING ", net;


	# AS_PATH: length
	if bgp_path.len > 32 then
		reject "AS_PATH len [", bgp_path.len ,"] longer than 32 - REJECTING ", net;


	# AS_PATH: left-most ASN
	if bgp_path.first != 4 then
		reject "invalid left-most ASN [", bgp_path.first, "] - REJECTING ", net;


	# AS_PATH: invalid ASNs
	if as_path_contains_invalid_asn() then
		reject "AS_PATH [", bgp_path ,"] contains invalid ASN - REJECTING ", net;




	# Prefix: only IPv6 Global Unicast space allowed
	if !(net ~ [2000::/3+]) then
		reject "prefix is not in IPv6 Global Unicast space - REJECTING ", net;


	# Prefix: global blacklist
	if prefix_is_in_global_blacklist() then
		reject "prefix is in global blacklist - REJECTING ", net;



	# Prefix: bogon
	if prefix_is_bogon() then
		reject "prefix is bogon - REJECTING ", net;


	# IRRdb checks
	verify_AS4_2_irrdb();

	# Blackhole request?
	if is_blackhole_filtering_request() then {
		accept "blackhole filtering request from AS4_2 - ACCEPTING ", net;
	} else {

		# Prefix: length
		if !prefix_len_is_valid(12, 48) then
			reject "prefix len [", net.len, "] not in 12-48 - REJECTING ", net;


	}


	accept;
}

filter announce_to_AS4_2 {


	# Blackhole request?
	if is_blackhole_filtering_request() then {
		apply_blackhole_filtering_policy();
	}

	# BGP control communities
	if !route_can_be_announced_to(4, 2001:db8:1:1::41, "AS4_2") then
		reject "route didn't pass control communities checks - NOT ANNOUNCING ", net, " TO AS4_2";

	apply_prepend(4, 2001:db8:1:1::41);


	add_noexport_noadvertise(4);

	scrub_communities_out();



	accept;
}

protocol bgp AS4_2 {
	description "AS4_1 client, AS-SET configured at client level";

	local as 999;
	neighbor 2001:db8:1:1::41 as 4;
	rs client;

	passive on;
	ttl security off;
	interpret communities off;

	# ---------------------------------------
	ipv6 {
	table master6;


	secondary;


	import table on;

	import keep filtered on;

	import filter receive_from_AS4_2;
	export filter announce_to_AS4_2;

	# ---------------------------------------
	};

		}


# AS-SET for AS5_1
function origin_as_is_in_AS5_1_as_set() {
	# AS-SET AS_AS5_FROM_PDB referenced but empty.
	# AS-SET AS5 referenced but empty.
	if bgp_path.last ~ AS_SET_WHITE_LIST_AS5_1_asns then
		return true;
	return false;
}

# R-SET for AS5_1
function prefix_is_in_AS5_1_as_set() {
	# AS-SET AS_AS5_FROM_PDB referenced but empty.
	# AS-SET AS5 referenced but empty.
    if net.type = NET_IP4 then
        if net ~ AS_SET_WHITE_LIST_AS5_1_prefixes_4 then
            return true;
    return false;
}

function next_hop_is_valid_for_AS5_1()
{
	# Checks if NEXT_HOP is one of those allowed for routes announced by AS5_1
	if bgp_next_hop = 192.0.2.51 then return true;
	return false;
}


function verify_AS5_1_irrdb()
bool origin_ok;
bool prefix_ok;
bool validated;
{
	origin_ok = false;
	prefix_ok = false;
	validated = false;

	origin_ok = origin_as_is_in_AS5_1_as_set();
	prefix_ok = prefix_is_in_AS5_1_as_set();

	if !origin_ok then {
		bgp_community.add((999, 64515));
		bgp_large_community.add((999, 0, 64515));

	}
	if origin_ok then {
		bgp_community.add((999, 64514));
		bgp_large_community.add((999, 0, 64514));

	}
	if !prefix_ok then {
		bgp_community.add((999, 64513));
		bgp_large_community.add((999, 0, 64513));

	}
	if prefix_ok then {
		bgp_community.add((999, 64512));
		bgp_large_community.add((999, 0, 64512));

	}

	# Origin ASN is valid, prefix is not: check if a RPKI ROAs exists.
	if origin_ok && prefix_in_rpki_roas_as_route_objects() then {
		bgp_community.add((999, 64516));
		bgp_large_community.add((999, 0, 64516));

		validated = true;
	}




	if !validated && !prefix_ok then {
		reject "prefix not in client's r_set - REJECTING ", net;

	}
}

filter receive_from_AS5_1 {
	if !(source = RTS_BGP ) then
		reject "source != RTS_BGP - REJECTING ", net;


	if !(net.type = NET_IP4) then
		reject "AFI not enabled for this peer - REJECTING ", net;



	scrub_communities_in();


	# NEXT_HOP
	if !next_hop_is_valid_for_AS5_1() then
		reject "NEXT_HOP [", bgp_next_hop, "] not allowed - REJECTING ", net;


	# AS_PATH: length
	if bgp_path.len > 32 then
		reject "AS_PATH len [", bgp_path.len ,"] longer than 32 - REJECTING ", net;


	# AS_PATH: left-most ASN
	if bgp_path.first != 5 then
		reject "invalid left-most ASN [", bgp_path.first, "] - REJECTING ", net;


	# AS_PATH: invalid ASNs
	if as_path_contains_invalid_asn() then
		reject "AS_PATH [", bgp_path ,"] contains invalid ASN - REJECTING ", net;





	# Prefix: global blacklist
	if prefix_is_in_global_blacklist() then
		reject "prefix is in global blacklist - REJECTING ", net;



	# Prefix: bogon
	if prefix_is_bogon() then
		reject "prefix is bogon - REJECTING ", net;


	# IRRdb checks
	verify_AS5_1_irrdb();

	# Blackhole request?
	if is_blackhole_filtering_request() then {
		accept "blackhole filtering request from AS5_1 - ACCEPTING ", net;
	} else {

		# Prefix: length
		if !prefix_len_is_valid(8, 24) then
			reject "prefix len [", net.len, "] not in 8-24 - REJECTING ", net;


	}


	accept;
}

filter announce_to_AS5_1 {


	# Blackhole request?
	if is_blackhole_filtering_request() then {
		apply_blackhole_filtering_policy();
	}

	# BGP control communities
	if !route_can_be_announced_to(5, 192.0.2.51, "AS5_1") then
		reject "route didn't pass control communities checks - NOT ANNOUNCING ", net, " TO AS5_1";

	apply_prepend(5, 192.0.2.51);


	add_noexport_noadvertise(5);

	scrub_communities_out();



	accept;
}

protocol bgp AS5_1 {
	description "AS5_1 client, AS-SET from PeeringDB";

	local as 999;
	neighbor 192.0.2.51 as 5;
	rs client;

	passive on;
	ttl security off;
	interpret communities off;

	# ---------------------------------------
	ipv4 {
	table master4;


	secondary;


	import table on;

	import keep filtered on;

	import filter receive_from_AS5_1;
	export filter announce_to_AS5_1;

	# ---------------------------------------
	};

		}


# AS-SET for AS5_2
function origin_as_is_in_AS5_2_as_set() {
	# AS-SET AS_AS5_FROM_PDB referenced but empty.
	if bgp_path.last ~ AS_SET_WHITE_LIST_AS5_2_asns then
		return true;
	# AS-SET AS5 referenced but empty.
	return false;
}

# R-SET for AS5_2
function prefix_is_in_AS5_2_as_set() {
	# AS-SET AS_AS5_FROM_PDB referenced but empty.
    if net.type = NET_IP6 then
        if net ~ AS_SET_WHITE_LIST_AS5_2_prefixes_6 then
            return true;
	# AS-SET AS5 referenced but empty.
    return false;
}

function next_hop_is_valid_for_AS5_2()
{
	# Checks if NEXT_HOP is one of those allowed for routes announced by AS5_2
	if bgp_next_hop = 2001:db8:1:1::51 then return true;
	return false;
}


function verify_AS5_2_irrdb()
bool origin_ok;
bool prefix_ok;
bool validated;
{
	origin_ok = false;
	prefix_ok = false;
	validated = false;

	origin_ok = origin_as_is_in_AS5_2_as_set();
	prefix_ok = prefix_is_in_AS5_2_as_set();

	if !origin_ok then {
		bgp_community.add((999, 64515));
		bgp_large_community.add((999, 0, 64515));

	}
	if origin_ok then {
		bgp_community.add((999, 64514));
		bgp_large_community.add((999, 0, 64514));

	}
	if !prefix_ok then {
		bgp_community.add((999, 64513));
		bgp_large_community.add((999, 0, 64513));

	}
	if prefix_ok then {
		bgp_community.add((999, 64512));
		bgp_large_community.add((999, 0, 64512));

	}

	# Origin ASN is valid, prefix is not: check if a RPKI ROAs exists.
	if origin_ok && prefix_in_rpki_roas_as_route_objects() then {
		bgp_community.add((999, 64516));
		bgp_large_community.add((999, 0, 64516));

		validated = true;
	}




	if !validated && !prefix_ok then {
		reject "prefix not in client's r_set - REJECTING ", net;

	}
}

filter receive_from_AS5_2 {
	if !(source = RTS_BGP ) then
		reject "source != RTS_BGP - REJECTING ", net;


	if !(net.type = NET_IP6) then
		reject "AFI not enabled for this peer - REJECTING ", net;



	scrub_communities_in();


	# NEXT_HOP
	if !next_hop_is_valid_for_AS5_2() then
		reject "NEXT_HOP [", bgp_next_hop, "] not allowed - REJECTING ", net;


	# AS_PATH: length
	if bgp_path.len > 32 then
		reject "AS_PATH len [", bgp_path.len ,"] longer than 32 - REJECTING ", net;


	# AS_PATH: left-most ASN
	if bgp_path.first != 5 then
		reject "invalid left-most ASN [", bgp_path.first, "] - REJECTING ", net;


	# AS_PATH: invalid ASNs
	if as_path_contains_invalid_asn() then
		reject "AS_PATH [", bgp_path ,"] contains invalid ASN - REJECTING ", net;




	# Prefix: only IPv6 Global Unicast space allowed
	if !(net ~ [2000::/3+]) then
		reject "prefix is not in IPv6 Global Unicast space - REJECTING ", net;


	# Prefix: global blacklist
	if prefix_is_in_global_blacklist() then
		reject "prefix is in global blacklist - REJECTING ", net;



	# Prefix: bogon
	if prefix_is_bogon() then
		reject "prefix is bogon - REJECTING ", net;


	# IRRdb checks
	verify_AS5_2_irrdb();

	# Blackhole request?
	if is_blackhole_filtering_request() then {
		accept "blackhole filtering request from AS5_2 - ACCEPTING ", net;
	} else {

		# Prefix: length
		if !prefix_len_is_valid(12, 48) then
			reject "prefix len [", net.len, "] not in 12-48 - REJECTING ", net;


	}


	accept;
}

filter announce_to_AS5_2 {


	# Blackhole request?
	if is_blackhole_filtering_request() then {
		apply_blackhole_filtering_policy();
	}

	# BGP control communities
	if !route_can_be_announced_to(5, 2001:db8:1:1::51, "AS5_2") then
		reject "route didn't pass control communities checks - NOT ANNOUNCING ", net, " TO AS5_2";

	apply_prepend(5, 2001:db8:1:1::51);


	add_noexport_noadvertise(5);

	scrub_communities_out();



	accept;
}

protocol bgp AS5_2 {
	description "AS5_1 client, AS-SET from PeeringDB";

	local as 999;
	neighbor 2001:db8:1:1::51 as 5;
	rs client;

	passive on;
	ttl security off;
	interpret communities off;

	# ---------------------------------------
	ipv6 {
	table master6;


	secondary;


	import table on;

	import keep filtered on;

	import filter receive_from_AS5_2;
	export filter announce_to_AS5_2;

	# ---------------------------------------
	};

		}


# AS-SET for AS6_1
function origin_as_is_in_AS6_1_as_set() {
	# AS-SET AS6 referenced but empty.
	return false;
}

# R-SET for AS6_1
function prefix_is_in_AS6_1_as_set() {
	# AS-SET AS6 referenced but empty.
    return false;
}

function next_hop_is_valid_for_AS6_1()
{
	# Checks if NEXT_HOP is one of those allowed for routes announced by AS6_1
	if bgp_next_hop = 192.0.2.61 then return true;
	return false;
}


function verify_AS6_1_irrdb()
bool origin_ok;
bool prefix_ok;
bool validated;
{
	origin_ok = false;
	prefix_ok = false;
	validated = false;

	origin_ok = origin_as_is_in_AS6_1_as_set();
	prefix_ok = prefix_is_in_AS6_1_as_set();

	if !origin_ok then {
		bgp_community.add((999, 64515));
		bgp_large_community.add((999, 0, 64515));

	}
	if origin_ok then {
		bgp_community.add((999, 64514));
		bgp_large_community.add((999, 0, 64514));

	}
	if !prefix_ok then {
		bgp_community.add((999, 64513));
		bgp_large_community.add((999, 0, 64513));

	}
	if prefix_ok then {
		bgp_community.add((999, 64512));
		bgp_large_community.add((999, 0, 64512));

	}

	# Origin ASN is valid, prefix is not: check if a RPKI ROAs exists.
	if origin_ok && prefix_in_rpki_roas_as_route_objects() then {
		bgp_community.add((999, 64516));
		bgp_large_community.add((999, 0, 64516));

		validated = true;
	}



	# Client's white list
	if !validated && net ~ [ 3.2.0.0/16{16,32} ] then {
		if bgp_path.last = 3 then {
		bgp_community.add((999, 64517));
		bgp_large_community.add((999, 0, 64517));

			validated = true;
		}
	}

	if !validated && !origin_ok then {
		reject "origin ASN [", bgp_path.last, "] not in allowed as-sets - REJECTING ", net;

	}
	if !validated && !prefix_ok then {
		reject "prefix not in client's r_set - REJECTING ", net;

	}
}

filter receive_from_AS6_1 {
	if !(source = RTS_BGP ) then
		reject "source != RTS_BGP - REJECTING ", net;


	if !(net.type = NET_IP4) then
		reject "AFI not enabled for this peer - REJECTING ", net;



	scrub_communities_in();


	# NEXT_HOP
	if !next_hop_is_valid_for_AS6_1() then
		reject "NEXT_HOP [", bgp_next_hop, "] not allowed - REJECTING ", net;


	# AS_PATH: length
	if bgp_path.len > 32 then
		reject "AS_PATH len [", bgp_path.len ,"] longer than 32 - REJECTING ", net;


	# AS_PATH: left-most ASN
	if bgp_path.first != 6 then
		reject "invalid left-most ASN [", bgp_path.first, "] - REJECTING ", net;


	# AS_PATH: invalid ASNs
	if as_path_contains_invalid_asn() then
		reject "AS_PATH [", bgp_path ,"] contains invalid ASN - REJECTING ", net;





	# Prefix: global blacklist
	if prefix_is_in_global_blacklist() then
		reject "prefix is in global blacklist - REJECTING ", net;



	# Prefix: bogon
	if prefix_is_bogon() then
		reject "prefix is bogon - REJECTING ", net;


	# IRRdb checks
	verify_AS6_1_irrdb();

	# Blackhole request?
	if is_blackhole_filtering_request() then {
		accept "blackhole filtering request from AS6_1 - ACCEPTING ", net;
	} else {

		# Prefix: length
		if !prefix_len_is_valid(8, 24) then
			reject "prefix len [", net.len, "] not in 8-24 - REJECTING ", net;


	}


	accept;
}

filter announce_to_AS6_1 {


	# Blackhole request?
	if is_blackhole_filtering_request() then {
		apply_blackhole_filtering_policy();
	}

	# BGP control communities
	if !route_can_be_announced_to(6, 192.0.2.61, "AS6_1") then
		reject "route didn't pass control communities checks - NOT ANNOUNCING ", net, " TO AS6_1";

	apply_prepend(6, 192.0.2.61);


	add_noexport_noadvertise(6);

	scrub_communities_out();



	accept;
}

protocol bgp AS6_1 {
	description "AS6_1 client";

	local as 999;
	neighbor 192.0.2.61 as 6;
	rs client;

	passive on;
	ttl security off;
	interpret communities off;

	# ---------------------------------------
	ipv4 {
	table master4;


	secondary;


	import table on;

	import keep filtered on;

	import filter receive_from_AS6_1;
	export filter announce_to_AS6_1;

	# ---------------------------------------
	};

		}


# AS-SET for AS6_2
function origin_as_is_in_AS6_2_as_set() {
	# AS-SET AS6 referenced but empty.
	return false;
}

# R-SET for AS6_2
function prefix_is_in_AS6_2_as_set() {
	# AS-SET AS6 referenced but empty.
    return false;
}

function next_hop_is_valid_for_AS6_2()
{
	# Checks if NEXT_HOP is one of those allowed for routes announced by AS6_2
	if bgp_next_hop = 2001:db8:1:1::61 then return true;
	return false;
}


function verify_AS6_2_irrdb()
bool origin_ok;
bool prefix_ok;
bool validated;
{
	origin_ok = false;
	prefix_ok = false;
	validated = false;

	origin_ok = origin_as_is_in_AS6_2_as_set();
	prefix_ok = prefix_is_in_AS6_2_as_set();

	if !origin_ok then {
		bgp_community.add((999, 64515));
		bgp_large_community.add((999, 0, 64515));

	}
	if origin_ok then {
		bgp_community.add((999, 64514));
		bgp_large_community.add((999, 0, 64514));

	}
	if !prefix_ok then {
		bgp_community.add((999, 64513));
		bgp_large_community.add((999, 0, 64513));

	}
	if prefix_ok then {
		bgp_community.add((999, 64512));
		bgp_large_community.add((999, 0, 64512));

	}

	# Origin ASN is valid, prefix is not: check if a RPKI ROAs exists.
	if origin_ok && prefix_in_rpki_roas_as_route_objects() then {
		bgp_community.add((999, 64516));
		bgp_large_community.add((999, 0, 64516));

		validated = true;
	}



	# Client's white list
	if !validated && net ~ [ 2a03:2::/32{32,128} ] then {
		if bgp_path.last = 3 then {
		bgp_community.add((999, 64517));
		bgp_large_community.add((999, 0, 64517));

			validated = true;
		}
	}

	if !validated && !origin_ok then {
		reject "origin ASN [", bgp_path.last, "] not in allowed as-sets - REJECTING ", net;

	}
	if !validated && !prefix_ok then {
		reject "prefix not in client's r_set - REJECTING ", net;

	}
}

filter receive_from_AS6_2 {
	if !(source = RTS_BGP ) then
		reject "source != RTS_BGP - REJECTING ", net;


	if !(net.type = NET_IP6) then
		reject "AFI not enabled for this peer - REJECTING ", net;



	scrub_communities_in();


	# NEXT_HOP
	if !next_hop_is_valid_for_AS6_2() then
		reject "NEXT_HOP [", bgp_next_hop, "] not allowed - REJECTING ", net;


	# AS_PATH: length
	if bgp_path.len > 32 then
		reject "AS_PATH len [", bgp_path.len ,"] longer than 32 - REJECTING ", net;


	# AS_PATH: left-most ASN
	if bgp_path.first != 6 then
		reject "invalid left-most ASN [", bgp_path.first, "] - REJECTING ", net;


	# AS_PATH: invalid ASNs
	if as_path_contains_invalid_asn() then
		reject "AS_PATH [", bgp_path ,"] contains invalid ASN - REJECTING ", net;




	# Prefix: only IPv6 Global Unicast space allowed
	if !(net ~ [2000::/3+]) then
		reject "prefix is not in IPv6 Global Unicast space - REJECTING ", net;


	# Prefix: global blacklist
	if prefix_is_in_global_blacklist() then
		reject "prefix is in global blacklist - REJECTING ", net;



	# Prefix: bogon
	if prefix_is_bogon() then
		reject "prefix is bogon - REJECTING ", net;


	# IRRdb checks
	verify_AS6_2_irrdb();

	# Blackhole request?
	if is_blackhole_filtering_request() then {
		accept "blackhole filtering request from AS6_2 - ACCEPTING ", net;
	} else {

		# Prefix: length
		if !prefix_len_is_valid(12, 48) then
			reject "prefix len [", net.len, "] not in 12-48 - REJECTING ", net;


	}


	accept;
}

filter announce_to_AS6_2 {


	# Blackhole request?
	if is_blackhole_filtering_request() then {
		apply_blackhole_filtering_policy();
	}

	# BGP control communities
	if !route_can_be_announced_to(6, 2001:db8:1:1::61, "AS6_2") then
		reject "route didn't pass control communities checks - NOT ANNOUNCING ", net, " TO AS6_2";

	apply_prepend(6, 2001:db8:1:1::61);


	add_noexport_noadvertise(6);

	scrub_communities_out();



	accept;
}

protocol bgp AS6_2 {
	description "AS6_1 client";

	local as 999;
	neighbor 2001:db8:1:1::61 as 6;
	rs client;

	passive on;
	ttl security off;
	interpret communities off;

	# ---------------------------------------
	ipv6 {
	table master6;


	secondary;


	import table on;

	import keep filtered on;

	import filter receive_from_AS6_2;
	export filter announce_to_AS6_2;

	# ---------------------------------------
	};

		}



