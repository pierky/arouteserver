# The 'asns' section can be used to provide some AS-level options
# that are shared among all the clients from the same AS.
#
# The whole section is optional.
asns:
  # The AS in the format "AS<ASN>".
  AS3333:

    # AS's authorized AS-SET(s) can be set here.
    #
    # If the client's configuration does not provide any AS-SET
    # and prefixes/origin enforcing is used then the following
    # AS-SETs are used.
    #
    # Example:
    #   asns:
    #     AS1:
    #       as_sets:
    #         - "AS-AS1"
    #     AS2:
    #       as_sets:
    #         - "AS-AS2"
    #   clients:
    #     - asn: 1
    #       ip: "192.0.2.11"
    #       cfg:
    #         filtering:
    #           irrdb:
    #             as_sets:
    #               - "AS-AS1-CUSTOMERS"
    #    - asn: 2
    #      ip: "192.0.2.22"
    #
    # This configuration leads to:
    # - AS-AS1-CUSTOMERS to be used for AS1 client, because client
    #   level 'as_sets' has higher priority over AS-level;
    # - AS-AS2 to be used for AS2 client, because no 'as_sets' are
    #   given for that client.
    #
    # More details on the Configuration page on ReadTheDocs:
    # https://arouteserver.readthedocs.io/en/latest/CONFIG.html
    as_sets:
      #- "NAME1"
      #- "NAME2"

  AS10745:
    as_sets:
      #- "NAME3"

# This is the list of all the route server's clients.
clients:
    # Client's ASN.
  - asn: 3333

    # Client's IP address(es).
    # For clients with multiple IP addresses (dual-stack clients
    # for example) a list of addresses can be provided here:
    # ip:
    #   - "192.0.2.11"
    #   - "2001:db8:1:1::11"
    ip: "192.0.2.11"

    # A brief description.
    #description: ""

    # An optional MD5 password used for authentication of BGP
    # session (RFC2385).
    #password: ""

    # The following configuration statements are optional.
    # Settings provided here override those provided in the
    # general configuration on a client-by-client basis.
    #
    # Please pay attention to the following client specific
    # settings:
    #
    # - filtering.black_list_pref
    # - filtering.irrdb.as_sets
    # - filtering.irrdb.white_list_route
    # - filtering.irrdb.white_list_pref
    # - filtering.irrdb.white_list_asn
    #
    # Please refer to the general configuration file for more
    # details.

    cfg:
      #prepend_rs_as: False

      #passive: True

      #gtsm: False

      #add_path: False

      filtering:

        next_hop:
          #policy: "strict"

          # Clients having 'policy' set to 'authorized_addresses'
          # must have the following option configured with the list
          # of IP addresses allowed to be used in the NEXT_HOP
          # attribute for the routes they announce to the route
          # server.
          #authorized_addresses_list:
            #- "IP_ADDRESS_1"
            #- "IP_ADDRESS_2"

        #ipv4_pref_len:
        #  min: 8
        #  max: 24
        #ipv6_pref_len:
        #  min: 12
        #  max: 48

        # List of prefixes that are unconditionally rejected
        # for this client.
        black_list_pref:
          #- prefix:
          #  length:
          #  comment: ""

        #max_as_path_len: 32

        #reject_invalid_as_in_as_path: True

        irrdb:

          # Client's AS-SET(s) can be set here.
          # If not AS-SETs are provided here, those from the 'asns'
          # section will be used.
          #
          # Allowed formats:
          # - AS64496
          # - AS-FOO
          # - AS64496:AS-FOO
          # - AS64496:AS-FOO:AS-BAR
          # - AS64496:AS-FOO:AS64511
          #
          # Optionally, the source can be prepended, followed by two
          # colon chars (ex. RIPE::AS-FOO, RIPE::AS64496:AS-FOO).
          #
          # More details on the Configuration page on ReadTheDocs:
          # https://arouteserver.readthedocs.io/en/latest/CONFIG.html
          as_sets:
            #- "NAME1"
            #- "NAME2"

          #enforce_origin_in_as_set: True
          #enforce_prefix_in_as_set: True

          # White lists.
          # The following 3 sections allow to configure white lists
          # for routes, prefixes and origin ASNs on a client-specific
          # level.
          #
          # The first one, 'white_list_route', allows routes to
          # "escape" IRRdb-based filters and to be always accepted.
          # Entries of this list are made up by prefixes and an
          # optional ASN which, if present, is matched against the
          # origin ASN. In this case, if the general 'filtering.
          # irrdb.tag_as_set' option is set, routes that pass the
          # IRRdb filters because included in this white list are
          # tagged with 'prefix_not_present_in_as_set',
          # 'origin_not_present_in_as_set' and
          # 'route_validated_via_white_list' communities.
          #
          # The last two, 'white_list_pref' and 'white_list_asn'
          # are more "tricky" and it is likely that they don't need
          # to be used at all. They allow to treat prefixes and ASNs
          # as if they were part of the client's AS-SET.
          # This implies that filters and features based on IRRdb
          # data are also applied as if routes were validated against
          # those data.
          # For example, if tagging via BGP community was enabled,
          # when a route is accepted because of one or both of these
          # white lists then the appropriate
          # 'prefix_present_in_as_set' or 'origin_present_in_as_set'
          # communities are also added.
          #
          # In any case, these white lists only apply to IRRdb-based
          # filters; other filters (NEXT_HOP, prefix length, max
          # AS_PATH length, transit-free/invalid ASN in AS_PATH and
          # so on) are applied accordingly to the rest of the
          # configuration.
          #
          # Prefixes are always intended as being inclusive of more
          # specifics unless the 'exact' attribute is set to True.
          # The range of included sub-prefixes can be set using 'ge'
          # and 'le' attributes; if they are missing,
          # <length>-[32|128] is used.

          # List of routes that are always accepted by IRRdb-based
          # filters.
          white_list_route:
            #- prefix:
            #  length:
            #  comment: ""
            #  asn:

          # List of prefixes that are treated as if they were
          # included within the client's AS-SET.
          white_list_pref:
            #- prefix:
            #  length:
            #  comment: ""

          # List of origin ASNs that are treated as if they were
          # included within the client's AS-SET.
          white_list_asn:
            #- 1
            #- 2
            #- 3

        rpki:
          #reject_invalid: True

        max_prefix:
          #action: "shutdown"
          #peering_db:
          #  enabled: True
          #  increment:
          #    absolute: 100
          #    relative: 15

          #limit_ipv4: 170000
          #limit_ipv6:  12000

        reject_policy:
          #policy: "reject"

      blackhole_filtering:
        #announce_to_client: True

      # The list of custom BGP communities that will be added to
      # routes received from this client.
      # These custom BGP communities must be declared in the general
      # configuration file.
      #attach_custom_communities:
      #  - "custom_community1_name"
      #  - "custom_community2_name"

  - asn: 10745

    # Client's IP address.
    ip:
    - "192.0.2.22"
    - "2001:db:1:1::22"
