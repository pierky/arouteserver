[loggers]
keys=root

[formatters]
keys=simple,syslog,file

[handlers]
# PLEASE CONFIGURE THE HANDLERS YOU WANT TO USE TO LOG MESSAGES
#
# One or more (comma delimited) handlers between the following:
#
#	stderr, smtp, syslog_udp, syslog_local, file, slack, <your_custom_handler>
#
# For each handler that is enabled here, the relative "[handler_XXX]" section
# must be configured below (example: [handler_email], [handler_file]).
#
#keys=stderr,file,smtp,syslog_udp,syslog_local
#keys=stderr,file,smtp
#keys=stderr,file
keys=stderr


[logger_root]
# PLEASE CONFIGURE THE HANDLERS YOU WANT TO USE TO LOG MESSAGES
# AND THE DESIRED LOGGING LEVEL
#
# Custom handlers and formatters are allowed too, within the limits of
# Python's logging facility (https://docs.python.org/2/library/logging.config.html)

# Logging level
# -------------
# That is: what messages must be logged.
#
# Keep this to INFO to allow the logging library to process every
# message logged by the application. Higher levels and filters
# can be set on an handler basis below.
#
# Set this to DEBUG to also enable debug messages.
#
# The '--logging-level' command line argument can be used to
# overwrite this setting.

# levels: DEBUG, INFO, WARN, ERROR, CRITICAL
level=INFO

# Logging handlers
# ----------------
# That is: where/how messages must be logged.
#
# One or more (comma delimited) handlers between the following:
#
#	stderr, smtp, syslog_udp, syslog_local, file, slack, <your_custom_handler>
#
# For each handler that is enabled here, the relative "[handler_XXX]" section
# must be configured below.

handlers=stderr


[formatter_simple]
format=ARouteServer %(asctime)s %(levelname)s %(message)s

[formatter_syslog]
format=ARouteServer[%(process)d]: %(levelname)s %(message)s

[formatter_file]
format=%(asctime)s %(levelname)s %(message)s


[handler_stderr]
class=StreamHandler
formatter=simple
args=(sys.stderr,)


[handler_smtp]
# Python's builtin SMTP handler sends one email
# message for each message that is logged.
#
# It's possible to overcome to this behaviour by
# using a custom handler such as mine:
#
# https://github.com/pierky/bufferedsmtphandler
#   PLEASE NOTE: beta version.
#
# It needs to be installed manually:
#
#   pip install buffered_smtp_handler
#
# - Set 'class=' to 'handlers.SMTPHandler' in order
#   to use Python's builtin SMTP handler.
# - Set it to 'pierky.buffered_smtp_handler.BufferedSMTPHandler'
#   to use my custom buffered version of it.
# -------------------------------------------------
class=handlers.SMTPHandler
#class=pierky.buffered_smtp_handler.BufferedSMTPHandler

# levels: DEBUG, INFO, WARN, ERROR, CRITICAL
level=WARN

formatter=simple

# PLEASE CONFIGURE THE FOLLOWING ARGUMENTS
# (if you add 'smtp' to the root logger's handlers)
# -------------------------------------------------

# without TLS:
args=(('SMTP_SERVER', 25), 'from@yourdomain.tld', ['to@yourdomain.tld'], 'ARouteServer error', ('username', 'password'))

# with TLS:
#args=(('SMTP_SERVER', 25), 'from@yourdomain.tld', ['to@yourdomain.tld'], 'ARouteServer error', ('username', 'password'), ())


[handler_syslog_udp]
class=handlers.SysLogHandler

# levels: DEBUG, INFO, WARN, ERROR, CRITICAL
level=WARN

formatter=syslog

# PLEASE CONFIGURE THE FOLLOWING ARGUMENTS
# (if you add 'syslog_udp' to the root logger's handlers)
# -------------------------------------------------------
args=(('SYSLOG_SERVER_HOST', handlers.SYSLOG_UDP_PORT), handlers.SysLogHandler.LOG_USER)


[handler_syslog_local]
class=handlers.SysLogHandler

# levels: DEBUG, INFO, WARN, ERROR, CRITICAL
level=WARN

formatter=syslog

# PLEASE CONFIGURE THE FOLLOWING ARGUMENTS
# (if you add 'syslog_local' to the root logger's handlers)
# ---------------------------------------------------------
args=('/dev/log', handlers.SysLogHandler.LOG_USER)


[handler_file]
formatter=file

# PLEASE CONFIGURE THE FOLLOWING ARGUMENTS
# (if you add 'file' to the root logger's handlers)
# -------------------------------------------------

# single file
class=FileHandler
args=('arouteserver.log', 'a')

# rotating file (in the example: 5MB, 5 rollovers)
#class=logging.handlers.RotatingFileHandler
#args=('arouteserver.log', 'a', 5000000, 5)


# PLEASE CONFIGURE THE FOLLOWING ARGUMENTS
# (if you add 'slack' to the root logger's handlers)
# -------------------------------------------------
# Uncomment and configure the following section only after
# installing the SlackerLogHandler module:
#
#   pip install slacker-log-handler
#
# https://pypi.python.org/pypi/slacker-log-handler
#
#[handler_slack]
#class=slacker_log_handler.SlackerLogHandler
## levels: DEBUG, INFO, WARN, ERROR, CRITICAL
#level=ERROR
#formatter=simple
#
## Please note: it's important to keep the last argument to False.
## It is the 'fail_silent' argument:
##
##   "If your API key is invalid or for some other reason the API
##    call returns an error, this option will silently ignore the
##    API error." (https://pypi.python.org/pypi/slacker-log-handler)
##
## If this is not set, any error during the posting of the log msg
## to the Slack channel will break the execution of the program.
##
##   "Make sure you have another log handler that will also handle
##    the same log events, or they may be lost entirely."
#args=("SLACK_TOKEN", "#CHANNEL_NAME", True, "ARouteServer", None, None, True)
